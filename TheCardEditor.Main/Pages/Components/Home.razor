@using System.Security.Cryptography;
@using TheCardEditor.DataModel.DTO;
@using Microsoft.AspNetCore.Components.Forms
<div class="col-md-12 row">
    <div class="col-md-4">
        <h2>Games</h2>
        @foreach (var game in Games)
        {
            <div @onclick="@(()=>_selectedGame=game)" style="background-color:@(_selectedGame.Id==game.Id?"lightblue":"")">
                <label class="col-form-label-lg">@game.Name</label>
            </div>
        }
        <FloatingInput ValueSelector="()=>_selectedGame.Name" Label="Game Name" InputChanged="a=>_selectedGame.Name=a" />
        <Button class="btn btn-primary" OnClick="()=>{_selectedGame.Id=0; AddGame();}">Add Game</Button>
        <Button disabled="@(_selectedGame.Id==0)" class="btn btn-primary" OnClick="AddGame">Update Game</Button>
        <Button disabled="@(_selectedGame.Id==0)" class="btn btn-primary" OnClick="DeleteGame">Delete Game</Button>
        <h2>Card Set</h2>

    </div>
    <div class="col-md-4">
    </div>
    <div class="col-md-4">
        <h2>Fonts</h2>
        @foreach (var font in Fonts)
        {
            <div class="col-md-12 row" style="background-color:@(_selectedFont?.Id==font.Id?"lightblue":"")" @onclick="@(()=>_selectedFont=font)">
                <label style="font-family:@font.Name" class="col-form-label-lg col-md-6">@font.Name</label>
                <label class="col-form-label col-md-6">@(Convert.ToBase64String(MD5.HashData(Convert.FromBase64String(font.Base64Data)))[..12])</label>
            </div>
        }
        <div class="col-md-12">
            <div class="col-md-8">
                <FloatingInput ValueSelector="()=>_selectedFont.Name" Label="Font Name" InputChanged="a=>_selectedFont.Name=a" />
                <InputFile class="form-control" OnChange="LoadFile"></InputFile>
            </div>
            <Button OnClickAsync="async ()=>{_selectedFont.Id=0; await AddFont();}" class="btn btn-primary">Add Font</Button>
            <Button disabled="@(_selectedFont.Id==0)" OnClickAsync="async ()=>await AddFont()" class="btn btn-primary">Update Font</Button>
            <Button disabled="@(_selectedFont.Id==0)" OnClick="DeleteFont" class="btn btn-primary">Delete Font</Button>
        </div>
    </div>
</div>

@code {
    [Inject] private ServiceAccessor<FontService> FontService { get; set; } = default!;
    [Inject] private ServiceAccessor<GameService> GameService { get; set; } = default!;
    [Inject] private ServiceAccessor<CardSetService> CardSetService { get; set; } = default!;
    [Inject] private IJsInterop JsInterop { get; set; } = default!;
    private FontModel _selectedFont = new();
    private IEnumerable<FontModel> Fonts { get; set; } = new List<FontModel>();
    private IEnumerable<GameModel> Games { get; set; } = new List<GameModel>();
    private IEnumerable<CardSetModel> CardSets { get; set; } = new List<CardSetModel>();
    private GameModel _selectedGame = new();
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        Fonts = FontService.Execute(f => f.GetFonts());
        Games = GameService.Execute(s => s.GetGames());
        foreach (var font in Fonts)
        {
            await JsInterop.LoadFont(font.Name, font.Base64Data);
        }
        StateHasChanged();
    }
    private void ReloadGames()
    {
        Games = GameService.Execute(s => s.GetGames());
        _selectedGame = new();
        StateHasChanged();

    }
    public void AddGame()
    {
        GameService.Execute((s, g) => s.UpdateGame(g), _selectedGame);
        ReloadGames();
    }

    public void DeleteGame()
    {
        GameService.Execute((s, g) => s.DeleteGame(g), _selectedGame);
        ReloadGames();
    }

    public async Task LoadFile(InputFileChangeEventArgs args)
    {
        var memoryStream = new MemoryStream();
        await args.File.OpenReadStream(1024 * 1014 * 4).CopyToAsync(memoryStream);
        var base64File = Convert.ToBase64String(memoryStream.ToArray());
        _selectedFont.Base64Data = base64File;
    }
    public void DeleteFont()
    {
        FontService.Execute((s, f) => s.DeleteFont(f), _selectedFont);
        ReloadFonts();
    }

    public async Task AddFont()
    {
        FontService.Execute((s, f) => s.UpdateFont(f), _selectedFont);
        await JsInterop.LoadFont(_selectedFont.Name, _selectedFont.Base64Data);
        ReloadFonts();
    }

    private void ReloadFonts()
    {
        Fonts = FontService.Execute(f => f.GetFonts());
        _selectedFont = new();
        StateHasChanged();
    }
}