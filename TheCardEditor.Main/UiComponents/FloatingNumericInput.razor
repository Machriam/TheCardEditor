<div @attributes="@(Attributes.Where(a=>a.Key!="class"))"
     class="form-floating @(string.Join(' ', Attributes.Where(a=>a.Key=="class").Select(a=>a.Value)))">
    <input disabled="@DisabledSelector.Invoke()" type="number" value="@_currentValue" @onchange="OnInputChanged" class="form-control" id="@Guid" placeholder="@Label">
    <label for="@Guid">@Label</label>
</div>
@code {
    Guid Guid = Guid.NewGuid();
    [Parameter] public string Label { get; set; } = "";
    [Parameter] public Func<decimal>? ValueSelector { get; set; }
    [Parameter] public Func<bool> DisabledSelector { get; set; } = () => false;
    [Parameter] public EventCallback<decimal> InputChanged { get; set; }
    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> Attributes { get; set; } = new();
    private decimal _currentValue = 0M;
    public async Task OnInputChanged(ChangeEventArgs args)
    {
        _currentValue = decimal.Parse(args.Value?.ToString() ?? "0");
        await InputChanged.InvokeAsync(_currentValue);
    }
    protected override void OnParametersSet()
    {
        var value = ValueSelector?.Invoke() ?? 0M;
        if (_currentValue == value) return;
        _currentValue = value;
        StateHasChanged();
    }
}