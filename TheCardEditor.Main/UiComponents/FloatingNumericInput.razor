@using System.Globalization
<div @attributes="@(Attributes.Where(a=>a.Key!="class"))"
     class="form-floating @(string.Join(' ', Attributes.Where(a=>a.Key=="class").Select(a=>a.Value)))">
    <input disabled="@DisabledSelector.Invoke()" type="number" @bind="@_currentValue"
           @bind:after="()=>OnInputChanged()" class="form-control" id="@Guid" placeholder="@Label">
    <label for="@Guid">@Label</label>
</div>
@code {
    Guid Guid = Guid.NewGuid();
    [Parameter] public string Label { get; set; } = "";
    [Parameter] public Func<decimal>? ValueSelector { get; set; }
    [Parameter] public Func<bool> DisabledSelector { get; set; } = () => false;
    [Parameter] public EventCallback<decimal> InputChanged { get; set; }
    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> Attributes { get; set; } = new();
    private string _currentValue = "";
    public async Task OnInputChanged()
    {
        var value = decimal.Parse(_currentValue.Replace(",", ".") ?? "0.0");
        await InputChanged.InvokeAsync(value);
    }
    protected override void OnParametersSet()
    {
        var value = ValueSelector?.Invoke() ?? 0M;
        if (_currentValue == FormatDecimal(value)) return;
        _currentValue = FormatDecimal(value);
        StateHasChanged();
    }
    private string FormatDecimal(decimal value)
    {
        return value.ToString("0.#####", CultureInfo.InvariantCulture);
    }
}