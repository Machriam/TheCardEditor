<Button @attributes="@Attributes" OnClickAsync="@SelectFile" class="@ButtonClass">
    Select File
</Button>
@code {
    [Inject] private ILocalStorageInterop LocalStorageInterop { get; set; } = default!;
    [Parameter] public EventCallback<FileDialogResult> OnFileDialogFinished { get; set; }
    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> Attributes { get; set; } = new();
    public string ButtonClass => 
        string.Join(" ", Attributes.Where(a => a.Key == "class").Select(a => a.Value).Append("btn").Append("btn-primary"));
    private const string LastPicturePath = nameof(LastPicturePath);
    public async Task SelectFile()
    {
        var result = new FileDialogResult();
        var initialDirectory = await LocalStorageInterop.GetItem(LastPicturePath) ?? "";
        SynchronizationContext.Current!.Post(async (d) =>
        {
            using var fileDialog = new OpenFileDialog()
                {
                    InitialDirectory = initialDirectory,
                    Filter = "Image Files (PNG) |*.PNG;"
                };
            var dialogResult = fileDialog.ShowDialog();
            if (dialogResult == DialogResult.OK)
            {
                result.FilePath = fileDialog.FileName;
            }
            else return;
            using var memoryStream = new MemoryStream();
            fileDialog.OpenFile().CopyTo(memoryStream);
            result.FileDataBase64 = "data:image/png;base64," + Convert.ToBase64String(memoryStream.ToArray());
            await OnFileDialogFinished.InvokeAsync(result);
            await LocalStorageInterop.SetItem(LastPicturePath, Path.GetDirectoryName(result.FilePath) ?? "");
        }, null);
    }
}