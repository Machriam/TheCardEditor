@implements IDisposable
@using Blazored.Modal;
@using TheCardEditor.Shared;
@using Toolbelt.Blazor.HotKeys2;
@using Shared.Features.CardEditor;
@using System.Text.Json.Nodes;
@using System.Text.Json;
<div @onclick="Close"
     style="cursor:pointer;position:absolute;font-size:32px;top:5%;left:92%">
    x
</div>
<div style="height:80vh;width:90vw;overflow:scroll" class="col-md-12 row">
    <canvas style="border:1px solid #000000" id="@CanvasId" width="@Width" height="@Height"></canvas>
    <div style="width: calc(89vw - @(Width)px)">
        <FloatingInput Label="Cardname" ValueSelector="@(()=>_currentCard.Name)" InputChanged="@(n=>_currentCard.Name=n)"></FloatingInput>
        <div class="col-md-12 row mt-2">
            <div class="col-md-3">
                <select value="@AddTag" @onchange="@(arg=>AddTag=arg.Value?.ToString()??"")" class="form-control col-md-3">
                    @foreach (var tag in Tags)
                    {
                        <option value="@tag">@tag</option>
                    }
                </select>
            </div>
            <Button class="btn btn-primary col-md-1" OnClick="@(async ()=>await AskForNewTag())">New Tag</Button>
            <FloatingNumericInput class="col-md-2" Label="X" DisabledSelector="@(()=>_multipleObjectsAreSelected)"
                                  ValueSelector="@( ()=>AddObjectX)" InputChanged="@( async x=>await OnCoordinatesChanged((int)x,null,null))"></FloatingNumericInput>
            <FloatingNumericInput DisabledSelector="@(()=>_multipleObjectsAreSelected)" class="col-md-2" Label="Y"
                                  ValueSelector="@( ()=>AddObjectY)" InputChanged="@(async y=>await OnCoordinatesChanged(null,(int)y,null))"></FloatingNumericInput>
            <FloatingNumericInput DisabledSelector="@(()=>_multipleObjectsAreSelected)" class="col-md-2" Label="Angle"
                                  ValueSelector="@( ()=>(decimal)AddObjectAngle)" InputChanged="@(async angle=>await OnCoordinatesChanged(null,null,angle))"></FloatingNumericInput>
            <Button class="btn btn-primary col-md-1" OnClick="@(async ()=>await AddText())">+</Button>
            <Button class="btn btn-danger col-md-1" OnClick="@(async ()=>await RemoveObject())">-</Button>
            <div class="col-md-12 mt-2"></div>
            <Button class="btn btn-primary col-md-1" OnClick="@(async ()=>await ApplyFont(CanvasFontStyle.FontWeight,"bold"))">Bold</Button>
            <Button class="btn btn-primary col-md-1" OnClick="@(async ()=>await ApplyFont(CanvasFontStyle.FontStyle,"italic"))">Italic</Button>
            <Button class="btn btn-primary col-md-1" OnClick="@(async ()=>await ApplyFont(CanvasFontStyle.TextAlign,"left"))">Left</Button>
            <Button class="btn btn-primary col-md-1" OnClick="@(async ()=>await ApplyFont(CanvasFontStyle.TextAlign,"right"))">Right</Button>
            <Button class="btn btn-primary col-md-1" OnClick="@(async ()=>await ApplyFont(CanvasFontStyle.TextAlign,"center"))">Text Center</Button>
            <Button class="btn btn-primary col-md-1" OnClick="@(async ()=>await ApplyFont(CanvasFontStyle.TextAlign,"justify"))">Justify</Button>
            <Button class="btn btn-primary col-md-1" OnClick="@(async ()=>await ApplyFont(CanvasFontStyle.Fill,""))">Fill</Button>
            <Button class="btn btn-primary col-md-1" OnClick="@(async ()=>await ApplyFont(CanvasFontStyle.Linethrough,true))">Linethrough</Button>
            <Button class="btn btn-primary col-md-1" OnClick="@(async ()=>await ApplyFont(CanvasFontStyle.Stroke,"red"))">Stroke</Button>
            <Button class="btn btn-primary col-md-1" OnClick="@(async ()=>await ApplyFont(CanvasFontStyle.Clear,true))">Clear</Button>
            <Button class="btn btn-primary col-md-1" OnClick="@(async ()=>await CenterObjects())">Center</Button>
            <Button class="btn btn-primary col-md-1" OnClick="@(async ()=>await ApplyFilter(new ImageFilterModel().For().FormFree()))">Free Form</Button>
            <Button class="btn btn-primary col-md-1" OnClick="@(async ()=>await ApplyFilter(new ImageFilterModel().For().InvertColors()))">Invert</Button>
            <div class="col-md-6">
                <DataList LabelText="Add Picture" SelectedItemChanged="SelectedPictureChanged" Items="@_pictureById.Values"></DataList>
                @if (_selectedPicture != null)
                {
                    <Button OnClickAsync="@(async ()=>await InsertPicture())" class="btn btn-primary">Insert @(_selectedPicture.Name)</Button>
                }
            </div>
            <FloatingNumericInput class="col-md-2" Label="Size" ValueSelector="@( ()=>FontSize)"
                                  InputChanged="@(async y=>{FontSize=(int)y;await ApplyFont(CanvasFontStyle.FontSize,FontSize);})"></FloatingNumericInput>
            <div class="col-md-12 mt-2"></div>
            <div class="col-md-3">
                <select @onchange="@(arg=>_selectedFont=arg.Value?.ToString()??"")" class="form-control col-md-3">
                    @foreach (var option in ApplicationStorage.AvailableFonts)
                    {
                        <option value="@option">@option</option>
                    }
                </select>
            </div>
            <Button class="btn btn-primary col-md-1" OnClickAsync="@(async ()=>await ApplyFont(CanvasFontStyle.FontFamily,_selectedFont))">Apply Font</Button>
        </div>
        <Button OnClickAsync="@(async()=>await SaveCard())" class="btn btn-primary mt-2">Save</Button>
        <Button OnClickAsync="@(async()=>await Reset())" class="btn btn-danger mt-2">Reset</Button>
        <Button OnClickAsync="@(async()=>await SaveAsTemplate())" class="btn btn-dark mt-2">Save As Template</Button>
        <Button OnClickAsync="@(async()=>await SendBackwards())" class="btn btn-dark mt-2">v</Button>
        <Button OnClickAsync="@(async()=>await BringForward())" class="btn btn-dark mt-2">^</Button>
        <Button class="btn btn-primary col-md-1" OnClick="@(async ()=>Console.WriteLine("bla"))">Filter Chaining</Button>
        <table class="col-md-12">
            <thead></thead>
            <tbody class="table table-borderless">
                @foreach (var item in _currentCard.VirtualSerializedData().GetObjects().OrderByDescending(i => i.Index))
                {
                    <tr style="cursor:pointer;" @onclick="@(async ()=>{_selectedIndex=item.Index; await SelectObject();})"
                        class="hovery @(_selectedIndex==item.Index?"alert-info":"")">
                        @if (_pictureById.TryGetValue(item.PictureId, out var picture))
                        {
                            <td class="row">
                                <div class="ps-3 col-md-1">@item.Index</div>
                                <div class="ps-3 col-md-2">@picture.Name</div>
                                <FilterChainSelection class="col-md-3 ps-3"></FilterChainSelection>
                            </td>
                        }
                        else
                        {
                            <td class="row">
                                <div class="ps-3 col-md-1">@item.Index</div>
                                <div class="ps-3 col-md-2">@item.Tag</div>
                            </td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>
<style>
    .hovery:hover {
        background-color: palevioletred;
    }
</style>

