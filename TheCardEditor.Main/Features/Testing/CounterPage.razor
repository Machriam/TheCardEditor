@implements IDisposable
@using System.Text.Json;
@using System.Text.Json.Nodes;
@using Microsoft.JSInterop;
@using TheCardEditor.DataModel.DataModel;
@using TheCardEditor.Main.Core;
@using TheCardEditor.Shared;
@attribute [Route(Location)]
<h1 style="font-family:'Shitty Test Font'">Counter</h1>

<p>Current count: @currentCount</p>

<div class="col-md-12 row">
    <Button class="btn btn-primary col-md-1" OnClickAsync="IncrementCount">Click me</Button>
    <Button class="btn btn-primary col-md-1" OnClickAsync="AddPicture">Picture</Button>
    <Button class="btn btn-primary col-md-1" OnClickAsync="LoadJson">Load Json</Button>
    <Button class="btn btn-primary col-md-1" OnClickAsync="SaveJson">Save Json</Button>
    <div class="col-md-2">
        <input class="form-control" @bind="SelectIndex" />
        <Button class="btn btn-primary" OnClickAsync="SelectObject">Select Object @SelectIndex</Button>
    </div>
    <div class="col-md-2">
        @if (_canvasObjects != null)
        {
            @foreach (var item in _canvasObjects)
            {
                <div style="cursor:pointer;" class="hovery"
                     @onclick="@(async ()=>{SelectIndex=item.Index; await SelectObject();})">
                    <span>@item.Name</span><span>@item.Tag</span><span>@item.Index</span>
                </div>
            }
        }
    </div>
    <div class="col-md-2">
        <Button class="btn btn-primary col-md-12" OnClickAsync="SendBackwards">Send Backwards</Button>
        <Button class="btn btn-primary col-md-12" OnClickAsync="BringForward">Bring Forward</Button>
    </div>
</div>
<div class="col-md-12 row ps-3 pt-3">
    <canvas style="border:1px solid #000000" id="@CanvasId" width="300" height="300"></canvas>
    <div class="col-md-2 d-flex flex-column justify-content-between">
        <Button class="btn btn-primary col-md-12" OnClickAsync="@(async ()=>await ApplyFont(CanvasFontStyle.FontWeight,"bold"))">Change Bold</Button>
        <Button class="btn btn-primary col-md-12" OnClickAsync="@(async ()=>await ApplyFont(CanvasFontStyle.Stroke,"red"))">Red Stroke</Button>
        <Button class="btn btn-primary col-md-12" OnClickAsync="@(async ()=>await ApplyFont(CanvasFontStyle.Linethrough,true))">Linethrough</Button>
        <Button class="btn btn-primary col-md-12" OnClickAsync="@(async ()=>await ApplyFont(CanvasFontStyle.Underline,true))">Underline</Button>
        <Button class="btn btn-primary col-md-12" OnClickAsync="@(async ()=>await ApplyFont(CanvasFontStyle.Overline,true))">Overline</Button>
        <Button class="btn btn-primary col-md-12" OnClickAsync="@(async ()=>await ApplyFont(CanvasFontStyle.Clear,true))">Clear</Button>
        <div class="col-md-12 row">
            <select @onchange="@(arg=>selectedFont=arg.Value?.ToString()??"")" class="form-control">
                @foreach (var option in AvailableFonts)
                {
                    <option value="@option">@option</option>
                }
            </select>
            <Button class="btn btn-primary" OnClickAsync="@(async ()=>await ApplyFont(CanvasFontStyle.FontFamily,selectedFont))">Apply Font</Button>
        </div>
        <div class="col-md-12 row">
            <div class="col-md-3">
                <input class="form-control" @bind="FontSize" />
            </div>
            <Button class="btn btn-primary col-md-8" OnClickAsync="@(async ()=>await ApplyFont(CanvasFontStyle.FontSize,FontSize))">Change Font Size</Button>
        </div>
    </div>
    <div class="col-md-12">
        <Button class="btn btn-primary" OnClickAsync="@(async ()=>await LoadFont())">Load Shitty Font</Button>
    </div>
</div>

<div style="width:1000px;height:500px" id="@SheetviewGridId"></div>
<Button class="btn btn-primary" OnClickAsync="async ()=>await _sheetView.CopyToClipboard()">Copy Data</Button>



<style>
    .hovery:hover {
        background-color: palevioletred;
    }
</style>